// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using radiostation_db.Data;

namespace radiostation_db.Migrations
{
    [DbContext(typeof(radiostationContext))]
    [Migration("20201122130758_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("radiostation_db.Models.ГрафикРаботы", b =>
                {
                    b.Property<int>("Время")
                        .HasColumnName("время_")
                        .HasColumnType("INT");

                    b.Property<DateTime>("Дата")
                        .HasColumnName("дата")
                        .HasColumnType("DATE");

                    b.Property<byte[]>("КодЗаписи")
                        .IsRequired()
                        .HasColumnName("код_записи")
                        .HasColumnType("NODATATYPE");

                    b.Property<byte[]>("КодСотрудника")
                        .IsRequired()
                        .HasColumnName("код_сотрудника")
                        .HasColumnType("NODATATYPE");

                    b.HasIndex("КодЗаписи");

                    b.HasIndex("КодСотрудника");

                    b.ToTable("График_работы");
                });

            modelBuilder.Entity("radiostation_db.Models.Должности", b =>
                {
                    b.Property<byte[]>("КодДолжности")
                        .HasColumnName("код_должности")
                        .HasColumnType("NODATATYPE");

                    b.Property<string>("НаименованиеДолжности")
                        .IsRequired()
                        .HasColumnName("наименование_должности")
                        .HasColumnType("CHAR(15)");

                    b.Property<string>("Обязанности")
                        .IsRequired()
                        .HasColumnName("обязанности")
                        .HasColumnType("VARCHAR(500)");

                    b.Property<int>("Оклад")
                        .HasColumnName("оклад")
                        .HasColumnType("INT");

                    b.Property<string>("Требования")
                        .IsRequired()
                        .HasColumnName("требования")
                        .HasColumnType("VARCHAR(500)");

                    b.HasKey("КодДолжности");

                    b.ToTable("Должности");
                });

            modelBuilder.Entity("radiostation_db.Models.Жанры", b =>
                {
                    b.Property<byte[]>("КодЖанра")
                        .HasColumnName("код_жанра")
                        .HasColumnType("NODATATYPE");

                    b.Property<string>("Наименование")
                        .IsRequired()
                        .HasColumnName("наименование")
                        .HasColumnType("VARCHAR(50)");

                    b.Property<string>("Описание")
                        .IsRequired()
                        .HasColumnName("описание")
                        .HasColumnType("VARCHAR(120)");

                    b.HasKey("КодЖанра");

                    b.HasIndex("Описание")
                        .IsUnique();

                    b.ToTable("Жанры");
                });

            modelBuilder.Entity("radiostation_db.Models.Записи", b =>
                {
                    b.Property<byte[]>("КодЗаписи")
                        .HasColumnName("код_записи")
                        .HasColumnType("NODATATYPE");

                    b.Property<string>("Альбом")
                        .IsRequired()
                        .HasColumnName("альбом")
                        .HasColumnType("CHAR(10)");

                    b.Property<DateTime>("Год")
                        .HasColumnName("год")
                        .HasColumnType("DATE");

                    b.Property<DateTime>("ДатаЗаписи")
                        .HasColumnName("дата_записи")
                        .HasColumnType("DATE");

                    b.Property<string>("Длительность")
                        .IsRequired()
                        .HasColumnName("длительность")
                        .HasColumnType("CHAR(10)");

                    b.Property<byte[]>("КодЖанра")
                        .IsRequired()
                        .HasColumnName("код_жанра")
                        .HasColumnType("NODATATYPE");

                    b.Property<byte[]>("КодИсполнителя")
                        .IsRequired()
                        .HasColumnName("код_исполнителя")
                        .HasColumnType("NODATATYPE");

                    b.Property<string>("Наименование")
                        .IsRequired()
                        .HasColumnName("наименование")
                        .HasColumnType("CHAR(10)");

                    b.Property<int>("Рейтинг")
                        .HasColumnName("рейтинг")
                        .HasColumnType("INT");

                    b.HasKey("КодЗаписи");

                    b.HasIndex("КодЖанра");

                    b.HasIndex("КодИсполнителя");

                    b.HasIndex("Наименование")
                        .IsUnique();

                    b.ToTable("Записи");
                });

            modelBuilder.Entity("radiostation_db.Models.Исполнители", b =>
                {
                    b.Property<byte[]>("КодИсполнителя")
                        .HasColumnName("код_исполнителя")
                        .HasColumnType("NODATATYPE");

                    b.Property<string>("Наименование")
                        .IsRequired()
                        .HasColumnName("наименование")
                        .HasColumnType("VARCHAR(50)");

                    b.Property<string>("Описание")
                        .IsRequired()
                        .HasColumnName("описание")
                        .HasColumnType("VARCHAR(120)");

                    b.HasKey("КодИсполнителя");

                    b.HasIndex("Описание")
                        .IsUnique();

                    b.ToTable("Исполнители");
                });

            modelBuilder.Entity("radiostation_db.Models.Сотрудники", b =>
                {
                    b.Property<byte[]>("КодСотрудника")
                        .HasColumnName("код_сотрудника")
                        .HasColumnType("NODATATYPE");

                    b.Property<string>("Адрес")
                        .IsRequired()
                        .HasColumnName("адрес")
                        .HasColumnType("VARCHAR(100)");

                    b.Property<int>("Возраст")
                        .HasColumnType("INT");

                    b.Property<byte[]>("КодДолжности")
                        .IsRequired()
                        .HasColumnName("код_должности")
                        .HasColumnType("NODATATYPE");

                    b.Property<string>("ПаспортныеДанны")
                        .IsRequired()
                        .HasColumnName("паспортные_данны")
                        .HasColumnType("VARCHAR(500)");

                    b.Property<string>("Пол")
                        .IsRequired()
                        .HasColumnName("пол")
                        .HasColumnType("CHAR(10)");

                    b.Property<int>("Телефон")
                        .HasColumnName("телефон")
                        .HasColumnType("INT");

                    b.Property<string>("Фио")
                        .IsRequired()
                        .HasColumnName("ФИО")
                        .HasColumnType("VARCHAR(100)");

                    b.HasKey("КодСотрудника");

                    b.HasIndex("Адрес")
                        .IsUnique();

                    b.HasIndex("КодДолжности");

                    b.HasIndex("ПаспортныеДанны")
                        .IsUnique();

                    b.HasIndex("Телефон")
                        .IsUnique();

                    b.ToTable("Сотрудники");
                });

            modelBuilder.Entity("radiostation_db.Models.ГрафикРаботы", b =>
                {
                    b.HasOne("radiostation_db.Models.Записи", "КодЗаписиNavigation")
                        .WithMany()
                        .HasForeignKey("КодЗаписи")
                        .IsRequired();

                    b.HasOne("radiostation_db.Models.Сотрудники", "КодСотрудникаNavigation")
                        .WithMany()
                        .HasForeignKey("КодСотрудника")
                        .IsRequired();
                });

            modelBuilder.Entity("radiostation_db.Models.Записи", b =>
                {
                    b.HasOne("radiostation_db.Models.Жанры", "КодЖанраNavigation")
                        .WithMany("Записи")
                        .HasForeignKey("КодЖанра")
                        .IsRequired();

                    b.HasOne("radiostation_db.Models.Исполнители", "КодИсполнителяNavigation")
                        .WithMany("Записи")
                        .HasForeignKey("КодИсполнителя")
                        .IsRequired();
                });

            modelBuilder.Entity("radiostation_db.Models.Сотрудники", b =>
                {
                    b.HasOne("radiostation_db.Models.Должности", "КодДолжностиNavigation")
                        .WithMany("Сотрудники")
                        .HasForeignKey("КодДолжности")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
